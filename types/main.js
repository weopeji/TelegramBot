var bot     = null;
var User    = null;
var h       = null;

module.exports = {
    init:function(initPlagins)
    {
        privateInit(initPlagins);
    },
    _CreatorFUN,
    notType,
    change_type,
    close,
}

function privateInit(initPlagins) {
    bot     = initPlagins.bot;
    User    = initPlagins.User;
    h       = initPlagins.helper_functions;
}

const MF =
{
    find_user: function(msg) {
        return User.findOne({user: msg.from.id});
    },
    create_user: function(msg) 
    {
        return User.create({
            user: msg.from.id, 
            first_name: msg.from.first_name, 
            last_name: msg.from.last_name,
            username: msg.from.username,
            language_code: msg.from.language_code,
            is_bot: msg.from.is_bot,
            type: null,
            where: null,
            new_project: {
                name: null,
                target: null,
                attraction_amount: null,
                date: null,
                minimal_amount: null,
                rate: null,
                date_payments: null,
                collection_period: null,
                organization: "1",
            },
        });
    },
    Update_Type: function(msg, data) {
        return User.findOneAndUpdate({user: msg.from.id}, {type: data});
    },
}

async function _CreatorFUN(msg)
{
    var _user = await MF.find_user(msg);
    if(!_user)
    {
        await MF.create_user(msg);
        notType(msg);
    } else
    {
        if(!_user.type) { notType(msg); } else { _MainMenu(msg); };
    }
}

async function notType(msg)
{
    var html =`–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º <strong>${msg.from.first_name} ${msg.from.last_name}</strong> –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ–º–µ <strong>investER</strong>. –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n<strong>–ò–ù–í–ï–°–¢–û–†</strong> - –ò–Ω–≤–µ—Å—Ç–∏—Ä—É—é –≤ –∫–æ–º–ø–∞–Ω–∏–∏/–ø—Ä–æ–µ–∫—Ç—ã\n\n<strong>–ë–ò–ó–ù–ï–°</strong> - –ü—Ä–∏–≤–ª–µ–∫–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å/–ø—Ä–æ–µ–∫—Ç\n\n<strong>–ü–†–ò–í–õ–ï–ß–ï–ù–ò–ï</strong> - –•–æ—á—É —Å—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –ø–æ –ø—Ä–∏–≤–ª–∏—á–µ–Ω–∏—é –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤\n\n`;
    h.send_html(msg.chat.id, html, {
        "resize_keyboard": true,
        "keyboard": [["üí∞ –ò–Ω–≤–µ—Å—Ç–æ—Ä", "üè≠ –ë–∏–∑–Ω–µ—Å", "ü§ù –ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ"]],
        "one_time_keyboard": true,
    });
} 

async function _MainMenu(msg)
{
    var infoTypes = {
        investor: function(msg) {
            var html = `<strong>${msg.from.first_name} ${msg.from.last_name}</strong>\n–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –Ω–∞ –¥–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.`;
            bot.sendMessage(msg.chat.id, html, {
                parse_mode: "HTML",
                reply_markup: {
                    "inline_keyboard": [
                        [
                            {
                                text: "–û–ó–ù–ê–ö–û–ú–ò–¢–°–Ø –° –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø–ú–ò",
                                url: "https://google.com",
                            }
                        ]
                    ],
                }
            });
            var html = `–í—ã <strong>–ò–Ω–≤–µ—Å—Ç–æ—Ä</strong>`;
            bot.sendMessage(msg.chat.id, html, {
                parse_mode: "HTML",
                reply_markup: {
                    "keyboard": [["–ú–û–ò –ò–ù–í–ï–°–¢–ò–¶–ò–ò", "–ò–ù–í–ï–°–¢–ò–†–û–í–ê–¢–¨", "–†–ï–ö–í–ï–ó–ò–¢–´"], ["–†–ï–ö–û–ú–ï–ù–î–û–í–ê–¢–¨","üîÅ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"]],
                    "one_time_keyboard": true,
                }
            });
        },
        business: function(msg) {
            var html = `<strong>${msg.from.first_name} ${msg.from.last_name}</strong>\n–¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ <strong>investER.</strong>`;
            bot.sendMessage(msg.chat.id, html, {
                parse_mode: "HTML",
            });
            var html = `–í—ã <strong>–±–∏–∑–Ω–µ—Å</strong>`;
            bot.sendMessage(msg.chat.id, html, {
                parse_mode: "HTML",
                reply_markup: {
                    "keyboard": [["‚ùì –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "‚úç –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"], ["‚úîÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã","‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"], ['üîÅ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å']],
                    "one_time_keyboard": true,
                }
            });
        },
        attraction: function(msg) {
            var html = `–í—ã <strong>–ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ</strong>`;
            bot.sendMessage(msg.chat.id, html, {
                parse_mode: "HTML",
                reply_markup: {
                    "keyboard": [["–ú–û–ò –ò–ù–í–ï–°–¢–ò–¶–ò–ò", "–ò–ù–í–ï–°–¢–ò–†–û–í–ê–¢–¨", "–†–ï–ö–í–ï–ó–ò–¢–´"], ["–†–ï–ö–û–ú–ï–ù–î–û–í–ê–¢–¨","–°–ú–ï–ù–ò–¢–¨ –†–û–õ–¨"]],
                    "one_time_keyboard": true,
                }
            });
        },
    };

    var _User = await MF.find_user(msg);
    infoTypes[_User.type](msg);
}

async function change_type(msg)
{
    const MF_DATA = 
    {
        "üí∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä": "investor",
        "üè≠ –±–∏–∑–Ω–µ—Å": "business",
        "ü§ù –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ": "attraction",
    }
    await MF.Update_Type(msg, MF_DATA[msg.text.toLowerCase()]);
    _MainMenu(msg);
}

async function close(msg)
{
    _MainMenu(msg);
    await User.findOneAndUpdate({user: msg.from.id}, {where: null});
}