var bot     = null;
var User    = null;
var h       = null;
var fs      = null;

module.exports = {
    init:function(initPlagins)
    {
        privateInit(initPlagins);
    },
    _CreatorFUN,
    notType,
    change_type,
    close,
}

function privateInit(initPlagins) {
    bot     = initPlagins.bot;
    User    = initPlagins.User;
    h       = initPlagins.helper_functions;
    fs      = initPlagins.fs;
    _data   = initPlagins._data;
    config  = initPlagins.config;
    https   = initPlagins.https;
}

const MF =
{
    find_user: function(msg) {
        return User.findOne({user: msg.from.id});
    },
    create_user: async function(msg) 
    {
        var _patch = `../users/${msg.from.id}`;
        fs.stat(_patch, async function(err) {
            if (!err) {}
            else if (err.code === 'ENOENT') {
                await fs.mkdir(_patch);
            }

            var _path_profile = `../users_profile/${msg.from.id}`;

            fs.stat(_path_profile, async function(err) {
                if (!err) {}
                else if (err.code === 'ENOENT') {
                    await fs.mkdir(_path_profile);
                }

                var user_profile    = await bot.getUserProfilePhotos(msg.from.id);
                var file_id         = user_profile.photos[0][0].file_id;
                var file            = await bot.getFile(file_id);
                var file_path       = file.file_path;
                var photo_url       = `https://api.telegram.org/file/bot${config.token}/${file_path}`;
                var name_photo      = `avatar-${file_path.split('/')[1]}`;
    
                const _file      = fs.createWriteStream(`../users_profile/${msg.from.id}/${name_photo}`);
                const request   = https.get(photo_url, async function(response) {
                    response.pipe(_file);
    
                    return User.create({
                        user: msg.from.id, 
                        first_name: msg.from.first_name, 
                        last_name: msg.from.last_name,
                        username: msg.from.username,
                        language_code: msg.from.language_code,
                        is_bot: msg.from.is_bot,
                        type: null,
                        img: name_photo,
                        googleAuth: null,
                    });
                });
            })
        });
    },
    Update_Type: function(msg, data) {
        return User.findOneAndUpdate({user: msg.from.id}, {type: data});
    },
}

async function _CreatorFUN(msg)
{
    var _user = await MF.find_user(msg);

    if(!_user)
    {
        await MF.create_user(msg);
        notType(msg);
    } else
    {
        if(!_user.type) { notType(msg); } else { _MainMenu(msg); };
    }
    
}

async function notType(msg)
{
    var html =`–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º <strong>${msg.from.first_name} ${msg.from.last_name}</strong> –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ–º–µ <strong>investER</strong>. –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n<strong>–ò–ù–í–ï–°–¢–û–†</strong> - –ò–Ω–≤–µ—Å—Ç–∏—Ä—É—é –≤ –∫–æ–º–ø–∞–Ω–∏–∏/–ø—Ä–æ–µ–∫—Ç—ã\n\n<strong>–ë–ò–ó–ù–ï–°</strong> - –ü—Ä–∏–≤–ª–µ–∫–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å/–ø—Ä–æ–µ–∫—Ç\n\n<strong>–ü–†–ò–í–õ–ï–ß–ï–ù–ò–ï</strong> - –•–æ—á—É —Å—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –ø–æ –ø—Ä–∏–≤–ª–∏—á–µ–Ω–∏—é –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤\n\n`;
    h.send_html(msg.chat.id, html, {
        "resize_keyboard": true,
        "keyboard": [["üí∞ –ò–Ω–≤–µ—Å—Ç–æ—Ä", "üè≠ –ë–∏–∑–Ω–µ—Å", "ü§ù –ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ"]],
        "one_time_keyboard": true,
    });
} 

async function _MainMenu(msg)
{
    var infoTypes = {
        investor: async function(msg) {
            var html = `–í—ã <strong>–ò–Ω–≤–µ—Å—Ç–æ—Ä</strong>`;
            await bot.sendMessage(msg.chat.id, html, {
                parse_mode: "HTML",
                reply_markup: { 
                    "keyboard": [["üí∞ –ú–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "üìà –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", "üí≥ –†–µ–∫–≤–µ–∑–∏—Ç—ã"], ["üë®‚Äçüíº –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å","üîÅ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"]],
                    "one_time_keyboard": true,
                }
            });
            var html = `<strong>${msg.from.first_name} ${msg.from.last_name}</strong>\n–í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –Ω–∞ –¥–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.`;
            bot.sendMessage(msg.chat.id, html, {
                parse_mode: "HTML",
                reply_markup: {
                    "inline_keyboard": [
                        [
                            {
                                text: "–û–ó–ù–ê–ö–û–ú–ò–¢–°–Ø –° –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø–ú–ò",
                                url: "https://t.me/testPut",
                            }
                        ]
                    ],
                }
            });
        },
        business: async function(msg) 
        {
            var _User = await MF.find_user(msg);

            var html = `<strong>${msg.from.first_name} ${msg.from.last_name}</strong>\n–¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ <strong>investER.</strong>\n\n`;

            await bot.sendMessage(msg.chat.id, html, {
                parse_mode: "HTML",
                reply_markup: {
                    "keyboard": [["‚ùì –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "‚úç –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"], ["‚úîÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã","‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"], ['üîÅ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å']],
                    "one_time_keyboard": true,
                }
            });

            if(!_User.googleAuth) 
            {
                var _html = `–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—â–∏—Ç–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –¥–≤–æ–π–Ω–æ–π –∞—É–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π <strong>googleAuth</strong>\n\n–ñ–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <strong>–ó–∞—â–∏—Ç–∏—Ç—å</strong>`;
                bot.sendMessage(msg.chat.id, _html, {
                    parse_mode: "HTML",
                    reply_markup: {
                        "inline_keyboard": [
                            [
                                {
                                    text: "–ó–∞—â–∏—Ç–∏—Ç—å",
                                    url: "https://t.me/testPut",
                                }
                            ]
                        ],
                    }
                });
            }
        },
        attraction: function(msg) {
            var html = `<strong>${msg.from.first_name} ${msg.from.last_name}</strong> –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ investER. –í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –Ω–∞—à–∏–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –ø–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—é –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤.\n\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –Ω–∞ investER –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ (–≤ —Å–ª–æ–≤–æ –∑–∞—à–∏—Ç–∞ —Å—Å—ã–ª–∫–∞) –∏–ª–∏ –≤–∞—à—É –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É. –ò –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ —Å –∫–∞–∂–¥–æ–π –∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏. –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –í–∞–º–∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä –±—É–¥–µ—Ç –∑–∞ –≤–∞–º–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ –∏ –∑–∞ –∫–∞–∂–¥—É—é –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é –≤ –ª—é–±—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å.\n\n–ü—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –≤ –∫–∞–∂–¥–æ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ —Ä–∞–∑–Ω—ã–π, –æ—Ç 0,5 - –¥–æ 10% –æ—Ç —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –í–∞–º–∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä –ø—Ä–æ–∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç, –≤–∞–º –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π, (–∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è), —Å—É–º–º–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏ –±–æ–Ω—É—Å–æ–º –¥–ª—è –≤–∞—Å.\n\n–ß—Ç–æ–± –±–æ–Ω—É—Å –ø—Ä–∏—à–µ–ª –∫ –≤–∞–º –Ω–∞ –∫–∞—Ä—Ç—É, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É —Ä–µ–∫–≤–∏–∑–∏—Ç—ã`;
            bot.sendMessage(msg.chat.id, html, {
                parse_mode: "HTML",
                reply_markup: {
                    "keyboard": [["üîó –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", "üôã‚Äç‚ôÇÔ∏è –ú–Ω–æ—é –ø—Ä–∏–≤–ª–µ—á–µ–Ω–æ"], ["üí≥ –†–µ–∫–≤–µ–∑–∏—Ç—ã","üîÅ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"]],
                    "one_time_keyboard": true,
                }
            });
        },
    };

    var _User = await MF.find_user(msg);
    infoTypes[_User.type](msg);
}

async function change_type(msg)
{
    const MF_DATA = 
    {
        "üí∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä": "investor",
        "üè≠ –±–∏–∑–Ω–µ—Å": "business",
        "ü§ù –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ": "attraction",
    }
    await MF.Update_Type(msg, MF_DATA[msg.text.toLowerCase()]);
    _MainMenu(msg);
}

async function close(msg)
{
    _MainMenu(msg);
    await User.findOneAndUpdate({user: msg.from.id}, {where: null});
}