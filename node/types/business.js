var bot         = null;
var h           = null;
var User        = null;
var https       = null;
var config      = null;
var _data       = null;
var Project     = null;
var puppeteer   = require('puppeteer');

module.exports = {
    init:function(initPlagins)
    {
        privateInit(initPlagins);
    },
    how_add,
    not_active,
    active,
    addProject,
    clean_project,
    not_active_callback,
}

function privateInit(initPlagins) {
    bot         = initPlagins.bot;
    h           = initPlagins.helper_functions;
    User        = initPlagins.User;
    fs          = initPlagins.fs;
    https       = initPlagins.https;
    config      = initPlagins.config;
    _data       = initPlagins._data;
    Project     = initPlagins.Project;
}

function how_add(msg)
{
    const stream = fs.createReadStream('assets/videos/video.mp4');
    bot.sendVideo(msg.chat.id, stream, {
        reply_markup: {
            "resize_keyboard": true,
            "keyboard": [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]],
            "one_time_keyboard": true,
        }
    });
}

async function not_active(msg) 
{
    var _projects   = await Project.find({user: msg.from.id});
    var _moderation = _projects.filter(el => el.type == "moderation");
    var _correction = _projects.filter(el => el.type == "correction");

    await h.send_html(msg.chat.id, "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã", {
        "resize_keyboard": true,
        "keyboard": [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]],
    });

    var keyboard = [];

    if(_moderation.length > 0) {
        keyboard.unshift([{
            text: "–û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
            callback_data: `place=not_active&type=moderation&data=first`,
        }]);
    }
    if(_correction.length > 0) {
        keyboard.unshift([{
            text: "–û–∂–∏–¥–∞—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            callback_data: `place=not_active&type=correction&data=first`,
        }]);
    }

    var html = `–£ –≤–∞—Å ${_moderation.length + _correction.length} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n\n<strong>–û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é: ${_moderation.length}</strong>\n<strong>–û–∂–∏–¥–∞—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${_correction.length}</strong>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –ø—Ä–æ–µ–∫—Ç–æ–≤:`;
    await h.send_html(msg.chat.id, html, {
        "inline_keyboard": keyboard,
    });
};

async function not_active_callback(msg) 
{
    var _projects   = await Project.find({user: msg.from.id});
    var _data       = msg.data;
    var _type       = h._GET(_data, 'type');
    var btnData     = h._GET(_data, 'data');

    h.send_html(msg.from.id, "*", {
        "resize_keyboard": true,
        "keyboard": [
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ],
    });


    const FUN = 
    {
        "moderation": async function() 
        {
            var _moderation     = _projects.filter(el => el.type == "moderation");
            var _keyboard       = [];
            var needProject     = null;
            var needNextProject = null;

            for(var i = 0; i < 3; i++) { 
                try {
                    await bot.deleteMessage(msg.from.id, msg.message.message_id - i);
                } catch(err) {

                }
            }; 

            if(btnData == "first") 
            {
                needProject = _moderation[0];
                needNextProject = 1;
            } else 
            {
                needProject = _moderation[btnData];
                if((btnData + 1) >= _moderation.length) {
                    needNextProject = "first";
                } else {
                    needNextProject = needNextProject + 1;
                }
            }
            if(_moderation.length > 1) 
            {
                _keyboard.push([
                    {
                        text: "–î–∞–ª–µ–µ",
                        callback_data: `place=not_active&type=moderation&data=${needNextProject}`,
                    }
                ])
            }

            var _urlImgProject = `${h.getURL()}html/project/cover/?id=${needProject._id}`;
            const browser = await puppeteer.launch({
                args: ['--no-sandbox', '--disable-setuid-sandbox'],
            });
            const page = await browser.newPage();
            await page.goto(_urlImgProject);
            await page.emulateMedia('screen');
            const element = await page.$('.cover_block');   
            await element.screenshot({path: `../projects/${needProject._id}/logo.png`});
            await browser.close();

            var html = `[–ü—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏](${h.getURL()}html/project/profil/#${needProject._id})\n[–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è](${h.getURL()}/projects/${needProject._id}/${needProject.data["file+7"]})\n[–í–∏–¥–µ–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è](${h.getURL()}/projects/${needProject._id}/${needProject.data["file+8"]})`;
            const stream = fs.createReadStream(`../projects/${needProject._id}/logo.png`);
            bot.sendPhoto(msg.from.id, stream, {
                "caption": html,
                "parse_mode": "MarkdownV2",
                "reply_markup": {
                    "inline_keyboard": _keyboard,
                }
            });
            
        },
        "correction": async function()
        {
            var _correction = _projects.filter(el => el.type == "correction");
            var _keyboard       = [];
            var needProject     = null;
            var needNextProject = null;

            for(var i = 0; i < 3; i++) { 
                try {
                    await bot.deleteMessage(msg.from.id, msg.message.message_id - i);
                } catch(err) {

                }
            }; 

            if(btnData == "first") 
            {
                needProject = _correction[0];
                needNextProject = 1;
            } else 
            {
                needProject = _correction[btnData];
                if((btnData + 1) >= _correction.length) {
                    needNextProject = "first";
                } else {
                    needNextProject = needNextProject + 1;
                }
            }

            _keyboard.push([
                {
                    text: "–ü–µ—Ä–µ–π—Ç–∏",
                    url: `${h.getURL()}html/project/creating/#${needProject._id}`,
                }
            ])

            if(_correction.length > 1) 
            {
                _keyboard.push([
                    {
                        text: "–î–∞–ª–µ–µ",
                        callback_data: `place=not_active&type=correction&data=${needNextProject}`,
                    }
                ])
            }

            var _urlImgProject = `${h.getURL()}html/project/cover/?id=${needProject._id}`;
            const browser = await puppeteer.launch({
                args: ['--no-sandbox', '--disable-setuid-sandbox'],
            });
            const page = await browser.newPage();
            await page.goto(_urlImgProject);
            await page.emulateMedia('screen');
            const element = await page.$('.cover_block');   
            await element.screenshot({path: `../projects/${needProject._id}/logo.png`});
            await browser.close();

            var html = `[–ü—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–∞–Ω–∏–∏](${h.getURL()}html/project/profil/#${needProject._id})\n[–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è](${h.getURL()}/projects/${needProject._id}/${needProject.data["file+7"]})\n[–í–∏–¥–µ–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è](${h.getURL()}/projects/${needProject._id}/${needProject.data["file+8"]})`;
            const stream = fs.createReadStream(`../projects/${needProject._id}/logo.png`);
            bot.sendPhoto(msg.from.id, stream, {
                "caption": html,
                "parse_mode": "MarkdownV2",
                "reply_markup": {
                    "inline_keyboard": _keyboard,
                }
            });
        },
    }

    FUN[_type]();
}

async function active(msg) 
{
    var _projects   = await Project.find({user: msg.from.id});
    var _active     = _projects.filter(el => el.type == "active");

    var html = `–£ –≤–∞—Å ${_active.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—å –Ω–∞–∑–∞–¥ –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–µ–∫—Ç`;
    h.send_html(msg.chat.id, html, {
        "resize_keyboard": true,
        "keyboard": [
            ["–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–Ω–µ–≥ –æ—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞", "–í—ã–ø–ª–∞—Ç—ã"],
            ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞","‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ],
    });

}

async function clean_project(msg) {
    await User.findOneAndUpdate({user: msg.from.id}, {new_project: _data.new_project});
    var html = "üßπ –ü—Ä–æ–µ–∫—Ç –æ—á–∏—â–µ–Ω, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥";
    h.send_html(msg.chat.id, html, {
        "resize_keyboard": true,
        "keyboard": [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]],
    });
}

async function addProject(msg) 
{
    var html = "*";
    await h.send_html(msg.from.id, html, {
        "resize_keyboard": true,
        "keyboard": [
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ],
    });

    var html = `–í–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–∏—Ç–µ –≥–æ—Ç–æ–≤—ã`;
    var _url = `${h.getURL()}html/project/creating/#${msg.from.id}`;

    await h.send_html(msg.from.id, html, {
        "inline_keyboard": [
            [
                {
                    text: "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                    url: _url
                }
            ]
        ],
    });
}