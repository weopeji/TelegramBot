var bot         = null;
var h           = null;
var User        = null;
var https       = null;
var config      = null;
var _data       = null;
var Project     = null;

module.exports = {
    init:function(initPlagins)
    {
        privateInit(initPlagins);
    },
    how_add,
    add_new_project_data,
    not_active,
    active,
    addProject,
    clean_project,
    put_project,
}

function privateInit(initPlagins) {
    bot         = initPlagins.bot;
    h           = initPlagins.helper_functions;
    User        = initPlagins.User;
    fs          = initPlagins.fs;
    https       = initPlagins.https;
    config      = initPlagins.config;
    _data       = initPlagins._data;
    Project     = initPlagins.Project;
}

function how_add(msg)
{
    const stream = fs.createReadStream('assets/videos/video.mp4');
    bot.sendVideo(msg.chat.id, stream, {
        reply_markup: {
            "resize_keyboard": true,
            "keyboard": [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]],
            "one_time_keyboard": true,
        }
    });
}

async function not_active(msg) 
{
    var _projects   = await Project.find({user: msg.from.id});
    var _moderation = _projects.filter(el => el.type == "moderation");
    var _correction = _projects.filter(el => el.type == "correction");

    var html = `–£ –≤–∞—Å ${_moderation.length + _correction.length} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n\n<strong>–û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é: ${_moderation.length}</strong>\n<strong>–û–∂–∏–¥–∞—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${_correction.length}</strong>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –ø—Ä–æ–µ–∫—Ç–æ–≤:`;
    h.send_html(msg.chat.id, html, {
        "resize_keyboard": true,
        "keyboard": [
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ],
    });
};

async function active(msg) 
{
    var _projects   = await Project.find({user: msg.from.id});
    var _active     = _projects.filter(el => el.type == "active");

    var html = `–£ –≤–∞—Å ${_active.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—å –Ω–∞–∑–∞–¥ –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–µ–∫—Ç`;
    h.send_html(msg.chat.id, html, {
        "resize_keyboard": true,
        "keyboard": [
            ["–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–Ω–µ–≥ –æ—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞", "–í—ã–ø–ª–∞—Ç—ã"],
            ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞","‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ],
    });

}

async function clean_project(msg) {
    await User.findOneAndUpdate({user: msg.from.id}, {new_project: _data.new_project});
    var html = "üßπ –ü—Ä–æ–µ–∫—Ç –æ—á–∏—â–µ–Ω, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥";
    h.send_html(msg.chat.id, html, {
        "resize_keyboard": true,
        "keyboard": [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]],
    });
}

async function put_project(msg) {
    var _User       = await h._User(msg);
    var _project    = await Project.create({
        user: msg.from.id,
        type: "moderation",
        data: _User.new_project,
    });
    await User.findOneAndUpdate({user: msg.from.id}, {new_project: _data.new_project});
    var html = "üî∂ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞–º–æ–¥–µ—Ä–∞—Ü–∏—é, –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö\n\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å <strong>–Ω–∞–∑–∞–¥</strong>";
    h.send_html(msg.chat.id, html, {
        "resize_keyboard": true,
        "keyboard": [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]],
    });

    reportProject(_project);
}

function reportProject(project) {
    var html = `–ü—Ä–æ–µ–∫—Ç ${project.data[1].name}\n\n–î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`;
    var _url = `https://t.me/TestTalegrammBot?start=project_${project._id}`;
    h.send_html(config._idChannel, html, {
        "inline_keyboard": [
            [
                {
                    text: "–ò–Ω–≤–µ—Å—Ç—Ä–æ–≤–∞—Ç—å",
                    url: _url,
                }
            ]
        ],
    })
}

async function addProject(msg) 
{
    var _User           = await h._User(msg);
    var need_button     = null;
    var need_button_key = [8, 3, 5];

    var _BT_Funs = {
        "right": async function() {
            page_need = _User.where.page + 1;
            await h.R_Where(msg, {
                name: "add_new_project",
                msg_id: _User.where.msg_id,
                page: page_need,
                button: 1
            });
        },
        "left": async function() {
            page_need = _User.where.page - 1;
            await h.R_Where(msg, {
                name: "add_new_project",
                msg_id: _User.where.msg_id,
                page: page_need,
                button: 1
            });
        },
        "down": async function() {
            need_button     = Number(h._GET(msg.data, "number"));
            if(need_button == need_button_key[_User.where.page - 1]) {
                need_button = 1;
            } else {
                need_button = need_button + 1;
            }
            await h.R_Where(msg, {
                name: "add_new_project",
                msg_id: _User.where.msg_id,
                page: _User.where.page,
                button: need_button
            });
        },
        "up": async function() {
            need_button     = Number(h._GET(msg.data, "number"));
            if(need_button == 1) {
                need_button = need_button_key[_User.where.page - 1];
            } else {
                need_button = need_button - 1;
            }
            await h.R_Where(msg, {
                name: "add_new_project",
                msg_id: _User.where.msg_id,
                page: _User.where.page,
                button: need_button
            });
        },
        "take": async function() {
            var _Array = _User.new_project;
            _Array[2].organization = _User.where.button;
            await User.updateOne({user: msg.from.id}, {new_project: _Array});
        }
    }

    if(_User.where == null) 
    {
        await h.send_html(msg.chat.id,
            "<strong>–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç</strong>\n\n–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤ —á–∞—Ç –Ω—É–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å–≤–µ–¥–µ–Ω–∏—è. –í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –∏–∑–º–µ–Ω–∏—Ç—å –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ.", 
            {
            "resize_keyboard": true,
            "keyboard": [
                ["üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "‚úÖ –ü–æ–¥–∞—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"],
                ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
            ],
        });

        var need_msg = await h.send_html(msg.chat.id, "–ó–∞–≥—Ä—É–∑–∫–∞...");

        await h.R_Where(msg, {
            name: "add_new_project",
            msg_id: need_msg.message_id,
            page: 1,
            button: 1
        });

    } else 
    {
        if(h._GET(msg.data, "button_type")) {
            await _BT_Funs[h._GET(msg.data, "button_type")]();
        };
    }

    var _User = await h._User(msg);

    projects_pages[_User.where.page](msg);
}

async function add_new_project_data(msg) {

    var _User       = await h._User(msg);
    var _Array      = _User.new_project;

    var buttons = {
        1: {
            1: function() {
                _Array[1].name = msg.text;
            },
            2: function() {
                _Array[1].target = msg.text;
            },
            3: function() {
                _Array[1].attraction_amount = msg.text;
            },
            4: function() {
                _Array[1].date = msg.text;
            },
            5: function() {
                _Array[1].minimal_amount = msg.text;
            },
            6: function() {
                _Array[1].rate = msg.text;
            },
            7: function() {
                _Array[1].date_payments = msg.text;
            },
            8: function() {
                _Array[1].collection_period = msg.text;
            }
        },
        3: {
            1: {
                1: function() {
                    _Array[3][1].name = msg.text;
                },
                2: function() {
                    _Array[3][1].inn = msg.text;
                },
                3: function() {
                    _Array[3][1].ogrn = msg.text;
                },
                4: function() {
                    _Array[3][1].addr = msg.text;
                },
                5: function() {
                    _Array[3][1].syte = msg.text;
                }
            },
            2: {

            }
        },
        4: {
            1: async function() {
                var _file = await bot.getFile(msg.document.file_id);
                var _patch = msg.document.mime_type.split('/')[1];
                var file = fs.createWriteStream("../users/"+msg.from.id+"/discharge."+_patch);
                var _url = `https://api.telegram.org/file/bot${config.token}/${_file.file_path}`;
                var request = https.get(_url, function(response) {
                    response.pipe(file);
                });
                _Array[4].file_url = `discharge.${_patch}`;
            }
        }
    }
        
    if(_User.where.page == 3) {
        var _organization = _User.new_project[2].organization;
        if(_organization == 1 || _organization == 2) {
            await buttons[_User.where.page][1][_User.where.button](); 
        } else {
            await buttons[_User.where.page][2][_User.where.button](); 
        }
    } else {
        await buttons[_User.where.page][_User.where.button](); 
    }
    await User.updateOne({user: msg.from.id}, {new_project: _Array});

    projects_pages[_User.where.page](msg);
}

var projects_pages = 
{
    1: async function(callbackQuery) // 1 ================================================================
    {
        var _chatId         = callbackQuery.from.id;
        var _User           = await User.findOne({user: _chatId});
        var _msgId          = _User.where.msg_id;
        var not_filled      = 0;
        var need_button     = _User.where.button;
    
        for (var key in _User.new_project) {
            if(_User.new_project[key] == null) not_filled = not_filled + 1;
        }
    
        var first_html  = `‚ùå –ï—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—É–Ω–∫—Ç–æ–≤: ${not_filled}\n\n`;
        var body_html   = "‚ùó <strong>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</strong>\n\n–ó–¥–µ—Å—å –º—ã —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞. –° –ø–æ–º–æ—â—å—é —Å—Ç—Ä–µ–ª–æ–∫ ‚¨áÔ∏è –∏ ‚¨ÜÔ∏è –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –∏ –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n\n\n";
    
        var strong, _strong, data_put, smyle, _info;
    
        if(need_button == 1) {
            strong  = "<strong>";
            _strong = "</strong>";
            _info   = "      <code>[–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏]</code>\n\n";
        } else {
            strong  = "";
            _strong = "";
            _info   = "";
        }
    
        if(_User.new_project[1].name) {
            data_put = _User.new_project[1].name;
            smyle = "‚úÖ";
        } else {
            data_put = "[–ù–µ –∑–∞–¥–∞–Ω–æ]";
            smyle = "‚ùó";
        }
    
        var button1 = `${smyle} ${strong}–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:${_strong} ${data_put}\n${_info}`;
    
        if(need_button == 2) {
            strong  = "<strong>";
            _strong = "</strong>";
            _info   = "      <code>[–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏]</code>\n\n";
        } else {
            strong  = "";
            _strong = "";
            _info   = "";
        }
    
        if(_User.new_project[1].target) {
            data_put = _User.new_project[1].target;
            smyle = "‚úÖ";
        } else {
            data_put = "[–ù–µ –∑–∞–¥–∞–Ω–æ]";
            smyle = "‚ùó";
        }
    
        var button2 = `${smyle} ${strong}–¶–µ–ª—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:${_strong} ${data_put}\n${_info}`;
    
        if(need_button == 3) {
            strong  = "<strong>";
            _strong = "</strong>";
            _info   = "      <code>[–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö]</code>\n\n";
        } else {
            strong  = "";
            _strong = "";
            _info   = "";
        }
    
        if(_User.new_project[1].attraction_amount) {
            data_put = _User.new_project[1].attraction_amount;
            smyle = "‚úÖ";
        } else {
            data_put = "[–ù–µ –∑–∞–¥–∞–Ω–æ]";
            smyle = "‚ùó";
        }
    
        var button3 = `${smyle} ${strong}–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è:${_strong} ${data_put}\n${_info}`;
    
        if(need_button == 4) {
            strong  = "<strong>";
            _strong = "</strong>";
            _info   = "      <code>[–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤]</code>\n\n";
        } else {
            strong  = "";
            _strong = "";
            _info   = "";
        }
    
        if(_User.new_project[1].date) {
            data_put = _User.new_project[1].date;
            smyle = "‚úÖ";
        } else {
            data_put = "[–ù–µ –∑–∞–¥–∞–Ω–æ]";
            smyle = "‚ùó";
        }
    
        var button4 = `${smyle} ${strong}–°—Ä–æ–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:${_strong} ${data_put}\n${_info}`;
    
        if(need_button == 5) {
            strong  = "<strong>";
            _strong = "</strong>";
            _info   = "      <code>[–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö (–æ—Ç 50000)]</code>\n\n";
        } else {
            strong  = "";
            _strong = "";
            _info   = "";
        }
    
        if(_User.new_project[1].minimal_amount) {
            data_put = _User.new_project[1].minimal_amount;
            smyle = "‚úÖ";
        } else {
            data_put = "[–ù–µ –∑–∞–¥–∞–Ω–æ]";
            smyle = "‚ùó";
        }
    
        var button5 = `${smyle} ${strong}–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:${_strong} ${data_put}\n${_info}`;
    
        if(need_button == 6) {
            strong  = "<strong>";
            _strong = "</strong>";
            _info   = "      <code>[–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –∏–ª–∏ –¥—Ä–æ–±–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1.15]</code>\n\n";
        } else {
            strong  = "";
            _strong = "";
            _info   = "";
        }
    
        if(_User.new_project[1].rate) {
            data_put = _User.new_project[1].rate;
            smyle = "‚úÖ";
        } else {
            data_put = "[–ù–µ –∑–∞–¥–∞–Ω–æ]";
            smyle = "‚ùó";
        }
    
        var button6 = `${smyle} ${strong}–°—Ç–∞–≤–∫–∞ % –≤ –º–µ—Å—è—Ü:${_strong} ${data_put}\n${_info}`;
    
        if(need_button == 7) {
            strong  = "<strong>";
            _strong = "</strong>";
            _info   = "      <code>[–ï–∂–µ–¥–Ω–µ–≤–Ω–æ, –ï–∂–µ–º–µ—Å—è—á–Ω–æ, –ï–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ, –ï–∂–µ–≥–æ–¥–Ω–æ]</code>\n\n";
        } else {
            strong  = "";
            _strong = "";
            _info   = "";
        }
    
        if(_User.new_project[1].date_payments) {
            data_put = _User.new_project[1].date_payments;
            smyle = "‚úÖ";
        } else {
            data_put = "[–ù–µ –∑–∞–¥–∞–Ω–æ]";
            smyle = "‚ùó";
        }
    
        var button7 = `${smyle} ${strong}–í—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤:${_strong} ${data_put}\n${_info}`;
    
        if(need_button == 8) {
            strong  = "<strong>";
            _strong = "</strong>";
            _info   = "      <code>[–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –ª–∏–±–æ –ë–µ—Å—Å—Ä–æ—á–Ω–æ]</code>\n\n";
        } else {
            strong  = "";
            _strong = "";
            _info   = "";
        }
    
        if(_User.new_project[1].collection_period) {
            data_put = _User.new_project[1].collection_period;
            smyle = "‚úÖ";
        } else {
            data_put = "[–ù–µ –∑–∞–¥–∞–Ω–æ]";
            smyle = "‚ùó";
        }
    
        var button8 = `${smyle} ${strong}–ü–µ—Ä–∏–æ–¥ —Å–±–æ—Ä–∞:${_strong} ${data_put}\n${_info}`;
    
        var html = first_html + body_html + button1 + button2 + button3 + button4 + button5 + button6 + button7 + button8;
    
        bot.editMessageText(html, {
            chat_id: _chatId,
            message_id: _msgId,
            parse_mode: "HTML",
            reply_markup: {
                "inline_keyboard": [
                    [
                        {
                            text: "‚¨áÔ∏è",
                            callback_data: `place=new_project&button_type=down&number=${need_button}`,
                        },
                        {
                            text: "‚¨ÜÔ∏è",
                            callback_data: `place=new_project&button_type=up&number=${need_button}`,
                        },
                        {
                            text: "‚û°Ô∏è",
                            callback_data: `place=new_project&button_type=right&number=${need_button}`,
                        }
                    ]
                ],
            }
        });
    },
    2: async function(callbackQuery) // 2 ================================================================
    {
        var _chatId         = callbackQuery.from.id;
        var _User           = await User.findOne({user: _chatId});
        var _msgId          = _User.where.msg_id;
        var need_button     = _User.where.button;

        var first_html  = `–í—ã–±–µ—Ä–∏—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å –ª–∏—Ü–∞, –ø—Ä–∏–≤–ª–µ–∫–∞—é—â–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:\n\n`;
        var body_html   = `‚ùó –° –ø–æ–º–æ—â—å—é —Å—Ç—Ä–µ–ª–æ–∫ ‚¨áÔ∏è –∏ ‚¨ÜÔ∏è –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ "–í—ã–±—Ä–∞—Ç—å"\n\n\n`;

        var strong, _strong, smyle;

        if(need_button == 1) {
            strong  = "<strong>";
            _strong = "</strong>";
        } else {
            strong = "";
            _strong = "";
        }

        if(_User.new_project[2].organization == "1") {
            smyle = "‚úÖ";
        } else {
            smyle = "‚ùó";
        }

        var button1 = `${smyle} ${strong}–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ –û–û–û,–û–ê–û –∏ —Ç.–¥${_strong}\n`;

        if(need_button == 2) {
            strong  = "<strong>";
            _strong = "</strong>";
        } else {
            strong = "";
            _strong = "";
        }

        if(_User.new_project[2].organization == "2") {
            smyle = "‚úÖ";
        } else {
            smyle = "‚ùó";
        }

        var button2 = `${smyle} ${strong}–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å${_strong}\n`;

        if(need_button == 3) {
            strong  = "<strong>";
            _strong = "</strong>";
        } else {
            strong = "";
            _strong = "";
        }

        if(_User.new_project[2].organization == "3") {
            smyle = "‚úÖ";
        } else {
            smyle = "‚ùó";
        }

        var button3 = `${smyle} ${strong}–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ${_strong}\n`;

        var html = first_html + body_html + button1 + button2 + button3;

        bot.editMessageText(html, {
            chat_id: _chatId,
            message_id: _msgId,
            parse_mode: "HTML",
            reply_markup: {
                "inline_keyboard": [
                    [
                        {
                            text: "–í—ã–±—Ä–∞—Ç—å",
                            callback_data: `place=new_project&button_type=take&number=${need_button}`,
                        }
                    ],
                    [
                        {
                            text: "‚¨ÖÔ∏è",
                            callback_data: `place=new_project&button_type=left&number=${need_button}`,
                        },
                        {
                            text: "‚¨áÔ∏è",
                            callback_data: `place=new_project&button_type=down&number=${need_button}`,
                        },
                        {
                            text: "‚¨ÜÔ∏è",
                            callback_data: `place=new_project&button_type=up&number=${need_button}`,
                        },
                        {
                            text: "‚û°Ô∏è",
                            callback_data: `place=new_project&button_type=right&number=${need_button}`,
                        }
                    ]
                ],
            }
        });
    },
    3: async function(callbackQuery) // 3 ================================================================ 
    {
        var _chatId         = callbackQuery.from.id;
        var _User           = await User.findOne({user: _chatId});
        var _msgId          = _User.where.msg_id;
        var need_button     = _User.where.button;
        var not_filled      = 0;

        for (var key in _User.new_project) {
            if(_User.new_project[key] == null) not_filled = not_filled + 1;
        }

        var project_class = {
            1: function() 
            {
                var first_html  = `‚ùå –ï—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—É–Ω–∫—Ç–æ–≤: ${not_filled}\n\n`;
                var body_html   = `‚ùó –° –ø–æ–º–æ—â—å—é —Å—Ç—Ä–µ–ª–æ–∫ ‚¨áÔ∏è –∏ ‚¨ÜÔ∏è –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ "–í—ã–±—Ä–∞—Ç—å"\n\n\n`;
            
                var strong, _strong, smyle;

                if(need_button == 1) {
                    strong  = "<strong>";
                    _strong = "</strong>";
                } else {
                    strong = "";
                    _strong = "";
                }
            
                if(_User.new_project[3][1].name) {
                    data_put = _User.new_project[3][1].name;
                    smyle = "‚úÖ";
                } else {
                    data_put = "[–ù–µ –∑–∞–¥–∞–Ω–æ]";
                    smyle = "‚ùó";
                }
            
                var button1 = `${smyle} ${strong}–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:${_strong} ${data_put}\n`;
            
                if(need_button == 2) {
                    strong  = "<strong>";
                    _strong = "</strong>";
                } else {
                    strong = "";
                    _strong = "";
                }
            
                if(_User.new_project[3][1].inn) {
                    data_put = _User.new_project[3][1].inn;
                    smyle = "‚úÖ";
                } else {
                    data_put = "[–ù–µ –∑–∞–¥–∞–Ω–æ]";
                    smyle = "‚ùó";
                }
            
                var button2 = `${smyle} ${strong}–ò–ù–ù:${_strong} ${data_put}\n`;
            
                if(need_button == 3) {
                    strong  = "<strong>";
                    _strong = "</strong>";
                } else {
                    strong = "";
                    _strong = "";
                }
            
                if(_User.new_project[3][1].ogrn) {
                    data_put = _User.new_project[3][1].ogrn;
                    smyle = "‚úÖ";
                } else {
                    data_put = "[–ù–µ –∑–∞–¥–∞–Ω–æ]";
                    smyle = "‚ùó";
                }
            
                var button3 = `${smyle} ${strong}–û–ì–†–ù:${_strong} ${data_put}\n`;
            
                if(need_button == 4) {
                    strong  = "<strong>";
                    _strong = "</strong>";
                } else {
                    strong = "";
                    _strong = "";
                }
            
                if(_User.new_project[3][1].addr) {
                    data_put = _User.new_project[3][1].addr;
                    smyle = "‚úÖ";
                } else {
                    data_put = "[–ù–µ –∑–∞–¥–∞–Ω–æ]";
                    smyle = "‚ùó";
                }
            
                var button4 = `${smyle} ${strong}–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å:${_strong} ${data_put}\n`;
            
                if(need_button == 5) {
                    strong  = "<strong>";
                    _strong = "</strong>";
                } else {
                    strong = "";
                    _strong = "";
                }
            
                if(_User.new_project[3][1].syte) {
                    data_put = _User.new_project[3][1].syte;
                    smyle = "‚úÖ";
                } else {
                    data_put = "[–ù–µ –∑–∞–¥–∞–Ω–æ]";
                    smyle = "‚ùó";
                }
            
                var button5 = `${smyle} ${strong}–°–∞–π—Ç:${_strong} ${data_put}\n`;

                var html = first_html + body_html + button1 + button2 + button3 + button4 + button5;
            
                bot.editMessageText(html, {
                    chat_id: _chatId,
                    message_id: _msgId,
                    parse_mode: "HTML",
                    reply_markup: {
                        "inline_keyboard": [
                            [
                                {
                                    text: "‚¨ÖÔ∏è",
                                    callback_data: `place=new_project&button_type=left&number=${need_button}`,
                                },
                                {
                                    text: "‚¨áÔ∏è",
                                    callback_data: `place=new_project&button_type=down&number=${need_button}`,
                                },
                                {
                                    text: "‚¨ÜÔ∏è",
                                    callback_data: `place=new_project&button_type=up&number=${need_button}`,
                                },
                                {
                                    text: "‚û°Ô∏è",
                                    callback_data: `place=new_project&button_type=right&number=${need_button}`,
                                }
                            ]
                        ],
                    }
                });
            },
            2: function() 
            {

            }
        }

        if(_User.new_project[2].organization == "1" || _User.new_project[2].organization == "2") {
            project_class[1]();
        } else {
            project_class[2]();
        }
    },
    4: async function(callbackQuery) // 4 =============================================================================
    {
        var _chatId         = callbackQuery.from.id;
        var _User           = await User.findOne({user: _chatId});
        var _msgId          = _User.where.msg_id;
        var need_button     = _User.where.button;
        var not_filled      = 0;
    
        for (var key in _User.new_project) {
            if(_User.new_project[key] == null) not_filled = not_filled + 1;
        }

    
        var first_html      = `‚ùå –ï—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—É–Ω–∫—Ç–æ–≤: ${not_filled}\n\n`;
        var body_html       = `<strong>–í—ã–ø–∏—Å–∫–∞ –∏–∑ –±–∞–Ω–∫–∞</strong>\n\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à—É –≤—ã–ø–∏—Å–∫—É –∏–∑ –±–∞–Ω–∫–∞ –∑–∞ 8 –º–µ—Å—è—Ü–µ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ <strong>–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–ø–∏—Å–∫—É</strong>, –∫–æ–≥–¥–∞ –±—É–¥–∏—Ç–µ –≥–æ—Ç–æ–≤—ã`;
        var body_html_ok    = `<strong>–í—ã–ø–∏—Å–∫–∞ –∏–∑ –±–∞–Ω–∫–∞</strong>\n\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à—É –≤—ã–ø–∏—Å–∫—É –∏–∑ –±–∞–Ω–∫–∞ –∑–∞ 8 –º–µ—Å—è—Ü–µ–≤\n\nüìÉ <strong>–í—ã–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞</strong>\n\n–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–º –Ω–∞–∂–º–∏—Ç–µ <strong>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –≤—ã–ø–∏—Å–∫—É</strong> –∏–ª–∏ <strong>–£–¥–∞–ª–∏—Ç—å –º–æ—é –≤—ã–ø–∏—Å–∫—É</strong>`;
        var need_board;

        var document_url = `${config.host_url}users/${_chatId}/discharge.pdf`;

        if(_User.new_project[4].file_url) 
        {
            need_body_html = body_html_ok;
            need_board = [
                [
                    {
                        text: "üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—é –≤—ã–ø–∏—Å–∫—É",
                        url: document_url,
                    }
                ],
                [
                    {
                        text: "‚ùå –£–¥–∞–ª–∏—Ç—å –≤—ã–ø–∏—Å–∫—É",
                        callback_data: `place=new_project&button_type=left&number=${need_button}`,
                    }
                ],
                [
                    {
                        text: "‚¨ÖÔ∏è",
                        callback_data: `place=new_project&button_type=left&number=${need_button}`,
                    },
                    {
                        text: "‚û°Ô∏è",
                        callback_data: `place=new_project&button_type=right&number=${need_button}`,
                    }
                ]
            ];
        } else 
        {
            need_body_html = body_html;
            need_board = [[
                {
                    text: "‚¨ÖÔ∏è",
                    callback_data: `place=new_project&button_type=left&number=${need_button}`,
                },
                {
                    text: "‚û°Ô∏è",
                    callback_data: `place=new_project&button_type=right&number=${need_button}`,
                }
            ]];
        }
        
        var html = first_html + need_body_html;
    
        bot.editMessageText(html, {
            chat_id: _chatId,
            message_id: _msgId,
            parse_mode: "HTML",
            reply_markup: {
                "inline_keyboard": need_board,
            }
        });
    }
}